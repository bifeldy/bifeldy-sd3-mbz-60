@inherits LayoutComponentBase

@implements IDisposable

@using bifeldy_sd3_lib_60.Repositories
@using bifeldy_sd3_lib_60.Services

@inject IJSRuntime _js
@inject NavigationManager _nm
@inject IHttpContextAccessor _hca

@inject ILogger<FoundLayout> _logger
@inject IApplicationService _app
@inject IGeneralRepository _generalRepo


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="true" DisableGutters="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" Class="ml-1"/>
        <MudText>@(_pageTitle ?? _app.AppName)</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Href="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" ClipMode="@DrawerClipMode.Always">
        <MudDrawerHeader Class="mud-theme-dark pa-4" Style="align-items: center;">
            <MudIcon Icon="@Icons.Material.Filled.PersonPin" Title="User" />
            <!--
                <MudImage Src="https://mudblazor.com/images/mony.jpg" Class="rounded-lg" Width="24" />
            -->
            @if (_drawerOpen) {
                <MudText Typo="Typo.h6" Class="ml-3 overflow-hidden" Style="white-space: nowrap; text-overflow: ellipsis;">
                    <AuthorizeView>
                        <Authorized>
                            @context.User.Identity?.Name
                        </Authorized>
                        <NotAuthorized>
                            Tamu Guest
                        </NotAuthorized>
                    </AuthorizeView>
                </MudText>
            }
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mb-8">@Body</MudMainContent>
    <MudAppBar Bottom="true" Elevation="1" Dense="true" Style="max-height: 32px;" DisableGutters="true" Class="px-2">
        <MudText>
            <small>@_app.AppName - v@_app.AppVersion</small>
        </MudText>
        <MudSpacer />
        <MudText>
            <small>@_clientIp - @_kodeDc</small>
        </MudText>
    </MudAppBar>
</MudLayout>


<script>
    function getDocumentTitle() {
        return document.title;
    }
    function setDocumentTitle(headTitle) {
        return document.title = headTitle;
    }
</script>


@code {

    string _clientIp = string.Empty;
    string _kodeDc = string.Empty;
    string _pageTitle = null;

    bool _drawerOpen = true;

    protected override async void OnInitialized() {
        _nm.LocationChanged += OnLocationChanged;
        _clientIp = _hca.HttpContext?.Connection.RemoteIpAddress.ToString();
        _kodeDc = await _generalRepo.GetKodeDc();
    }

    public void Dispose() {
        _nm.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args) {
        if (args.IsNavigationIntercepted) {
            // Navigated From HTML (eg. href="", document.window.location="")
        }
        await ChangePageTitle();
        base.StateHasChanged();
    }

    private void DrawerToggle() {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ChangePageTitle() {
        try {
            string oldDocumentTitle = await _js.InvokeAsync<string>("getDocumentTitle");
            if ($"{_pageTitle} | {_app.AppName}" != oldDocumentTitle) {
                _pageTitle = oldDocumentTitle;
                await _js.InvokeVoidAsync("setDocumentTitle", $"{_pageTitle} | {_app.AppName}");
            }
        }
        catch (Exception ex) {
            _logger.LogError($"[FOUND_LAYOUT_RAZOR] 📃 {ex.Message}");
        }
    }

}
