@page "/api-key-ip-origin"
@inherits PagesLayout
@attribute [Authorize(Roles = "USER_SD_SSD_3")]

@using bifeldy_sd3_lib_60.Databases
@using bifeldy_sd3_lib_60.Repositories
@using bifeldy_sd3_lib_60.Services
@using bifeldy_sd3_lib_60.Tables

@using bifeldy_sd3_mbz_60.Models
@using bifeldy_sd3_mbz_60.Repositories
@using bifeldy_sd3_mbz_60.Shared.Dialogs
@using bifeldy_sd3_mbz_60.Services

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@inject IOraPg _orapg
@inject IApiKeyRepository _apiKeyRepo


<PageTitle>API Key IP Origin</PageTitle>

<MudPaper Square="true" Class="px-0" Style="background: brown; height: 64px;" />

<MudContainer MaxWidth="MaxWidth.Large" Class="py-5 px-5">

    <MudText Typo="Typo.h3" GutterBottom="true">
        Kelola API Key & IP Origin
    </MudText>

    <MudText Typo="Typo.h6">
        Untuk membatasi siapa saja yang diperbolehkan nembak ke /API/blablabla~ ini.
    </MudText>

    <MudText Class="red-text">
        Isi IP Origin dengan "*" untuk membebaskan IP apapun menggunakannya, tidak disarankan.
    </MudText>

    <MudDivider Class="my-3" />
    
    @if (isBusy) {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else {
        <MudTable T="API_KEY_T" Items="apiKeys" Filter="new Func<API_KEY_T, bool>(SearchFilter)" OnRowClick="RowClickEvent" Hover="true" SortLabel="Sort By" Elevation="0" Dense="true">
            <ToolBarContent>
                <MudButton Class="mx-1" Color="Color.Primary" Variant="Variant.Filled" OnClick="RefreshData" StartIcon="@Icons.Material.Filled.Refresh">Refresh</MudButton>
                <MudButton Class="mx-1" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => ApiKeyEdit("Tambah Baru"))" StartIcon="@Icons.Material.Filled.Add">Baru</MudButton>
                <MudSpacer />
                <MudTextField @bind-Value="searchQuery" Class="mx-1" Placeholder="Pencarian" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<API_KEY_T, object>(x => x.KEY)">Key</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<API_KEY_T, object>(x => x.IP_ORIGIN)">IP Origin</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Key">@context.KEY</MudTd>
                <MudTd DataLabel="IP Origin">@context.IP_ORIGIN</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{ 50, 100 }" />
            </PagerContent>
        </MudTable>
    }

</MudContainer>


@code {
    private bool isBusy = false;

    private List<API_KEY_T> apiKeys = new List<API_KEY_T>();

    private string searchQuery = string.Empty;
    private bool SearchFilter(API_KEY_T element) => Search(element, searchQuery);

    protected override void OnInitialized() {
        RefreshData();
    }

    private void RefreshData() {
        Task.Run(async () => {
            isBusy = true;
            await base.InvokeAsync(base.StateHasChanged);
            apiKeys.Clear();
            List<API_KEY_T> newApiKeys = await _apiKeyRepo.GetAll();
            apiKeys.AddRange(newApiKeys);
            isBusy = false;
            await base.InvokeAsync(base.StateHasChanged);
        });
    }

    private bool Search(API_KEY_T element, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString)) {
            return true;
        }
        if (!string.IsNullOrEmpty(element.KEY)) {
            if (element.KEY.Contains(searchString, StringComparison.OrdinalIgnoreCase)) {
                return true;
            }
        }
        if (!string.IsNullOrEmpty(element.IP_ORIGIN)) {
            if (element.IP_ORIGIN.Contains(searchString, StringComparison.OrdinalIgnoreCase)) {
                return true;
            }
        }
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<API_KEY_T> tableRowClickEventArgs) {
        ApiKeyEdit("Ubah Data", tableRowClickEventArgs.Item);
    }

    private async void ApiKeyEdit(string title, API_KEY_T apiKey = null) {
        DialogParameters parameters = new DialogParameters();
        parameters.Add("apiKey", apiKey);

        DialogOptions options = new DialogOptions() {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = false,
            CloseButton = true
        };

        IDialogReference dialog = DialogService.Show<ApiKeyDialogEdit>(title, parameters, options);

        DialogResult result = await dialog.Result;
        if (!result.Cancelled) {
            if (apiKey == null) {
                apiKey = (API_KEY_T) result.Data;
                bool success = false;
                await Task.Run(async () => {
                    success = await _apiKeyRepo.Create(apiKey);
                });
                if (success) {
                    Snackbar.Add("Berhasil Menambah API Key IP Origin", Severity.Success);
                }
                else {
                    Snackbar.Add("Gagal Menambah API Key IP Origin", Severity.Error);
                }
            }
            else {
                apiKey = (API_KEY_T)result.Data;
                bool success = false;
                await Task.Run(async () => {
                    _orapg.Set<API_KEY_T>().Update(apiKey);
                    success = await _orapg.SaveChangesAsync() > 0;
                });
                if (success) {
                    Snackbar.Add("Berhasil Memperbarui API Key IP Origin", Severity.Success);
                }
                else {
                    Snackbar.Add("Gagal Memperbarui API Key IP Origin", Severity.Error);
                }
            }
        }
        RefreshData();
    }

}
